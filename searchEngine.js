import Fuse from "fuse.js";
const DEBUG_MODE = false;
export function performFuzzySearch(collections, searchQuery) {
    if (DEBUG_MODE)
        console.log("🔍 Processing Search Query:", searchQuery);
    // ✅ Step 1: Detect AND/OR Operators (Proper Parsing)
    let searchTerms;
    let isOrSearch = false;
    let isAndSearch = false;
    if (/\bOR\b/i.test(searchQuery)) {
        searchTerms = searchQuery.split(/\bOR\b/i).map(term => term.trim());
        isOrSearch = true;
    }
    else if (/\bAND\b/i.test(searchQuery)) {
        searchTerms = searchQuery.split(/\bAND\b/i).map(term => term.trim());
        isAndSearch = true;
    }
    else {
        searchTerms = searchQuery.split(/\s+/).map(term => term.trim()); // Default AND behavior
    }
    if (DEBUG_MODE)
        console.log(`🔎 Detected ${isOrSearch ? "OR" : isAndSearch ? "AND" : "Basic"} Search`, searchTerms);
    return collections.map(collection => {
        const fuse = new Fuse(collection.items, {
            keys: ["title", "author", "description", "categoryName", "publisher", "date", "tags"],
            includeScore: true,
            threshold: 0.4 // ✅ Adjust for strict/loose searching
        });
        let matchedItems = [];
        if (isOrSearch) {
            // ✅ OR Search: Merge results from separate searches
            searchTerms.forEach(term => {
                const results = fuse.search(term).map(result => result.item);
                if (DEBUG_MODE)
                    console.log("Fuzzy search results, Sam:", results);
                matchedItems.push(...results);
            });
            // Remove duplicates
            matchedItems = Array.from(new Set(matchedItems));
        }
        else if (isAndSearch) {
            // ✅ AND Search: Must match at least one term in each separate search
            const searchResults = searchTerms.map(term => fuse.search(term).map(result => result.item));
            // ✅ Keep only items that appear in *every* search result set
            matchedItems = searchResults.reduce((acc, curr) => {
                return acc.filter(item => curr.includes(item));
            }, searchResults[0] || []);
        }
        else {
            // ✅ Basic Search (No AND/OR)
            matchedItems = fuse.search(searchQuery).map(result => result.item);
        }
        return {
            collectionName: collection.collectionName,
            designator: collection.designator || "MISC",
            items: matchedItems
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoRW5naW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VhcmNoRW5naW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUMzQixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUM7QUFXekIsTUFBTSxVQUFVLGtCQUFrQixDQUFDLFdBQWtCLEVBQUUsV0FBbUI7SUFDdEUsSUFBSSxVQUFVO1FBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUV4RSxxREFBcUQ7SUFDckQsSUFBSSxXQUFxQixDQUFDO0lBQzFCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN2QixJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFFeEIsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1FBQzdCLFdBQVcsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLFVBQVUsR0FBRyxJQUFJLENBQUM7S0FDckI7U0FBTSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7UUFDckMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDckUsV0FBVyxHQUFHLElBQUksQ0FBQztLQUN0QjtTQUFNO1FBQ0gsV0FBVyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyx1QkFBdUI7S0FDM0Y7SUFFRCxJQUFJLFVBQVU7UUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVwSCxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDaEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRTtZQUNwQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDckYsWUFBWSxFQUFFLElBQUk7WUFDbEIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxzQ0FBc0M7U0FDeEQsQ0FBQyxDQUFDO1FBRUgsSUFBSSxZQUFZLEdBQVUsRUFBRSxDQUFDO1FBRTdCLElBQUksVUFBVSxFQUFFO1lBQ1osb0RBQW9EO1lBQ3BELFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3ZCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM3RCxJQUFJLFVBQVU7b0JBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDbkUsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDO1lBRUgsb0JBQW9CO1lBQ3BCLFlBQVksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDcEQ7YUFBTSxJQUFJLFdBQVcsRUFBRTtZQUNwQixxRUFBcUU7WUFDckUsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFFNUYsNkRBQTZEO1lBQzdELFlBQVksR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUM5QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDbkQsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUM5QjthQUFNO1lBQ0gsNkJBQTZCO1lBQzdCLFlBQVksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0RTtRQUVELE9BQU87WUFDSCxjQUFjLEVBQUUsVUFBVSxDQUFDLGNBQWM7WUFDekMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxVQUFVLElBQUksTUFBTTtZQUMzQyxLQUFLLEVBQUUsWUFBWTtTQUN0QixDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZ1c2UgZnJvbSBcImZ1c2UuanNcIjtcbmNvbnN0IERFQlVHX01PREUgPSBmYWxzZTtcblxuZXhwb3J0IGludGVyZmFjZSBTZWFyY2hhYmxlSXRlbSB7XG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgYXV0aG9yPzogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIGNhdGVnb3J5TmFtZT86IHN0cmluZztcbiAgICBwdWJsaXNoZXI/OiBzdHJpbmc7XG4gICAgdGFncz86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBlcmZvcm1GdXp6eVNlYXJjaChjb2xsZWN0aW9uczogYW55W10sIHNlYXJjaFF1ZXJ5OiBzdHJpbmcpOiB7IGNvbGxlY3Rpb25OYW1lOiBzdHJpbmc7IGRlc2lnbmF0b3I6IHN0cmluZzsgaXRlbXM6IGFueVtdIH1bXSB7XG4gICAgaWYgKERFQlVHX01PREUpIGNvbnNvbGUubG9nKFwi8J+UjSBQcm9jZXNzaW5nIFNlYXJjaCBRdWVyeTpcIiwgc2VhcmNoUXVlcnkpO1xuXG4gICAgLy8g4pyFIFN0ZXAgMTogRGV0ZWN0IEFORC9PUiBPcGVyYXRvcnMgKFByb3BlciBQYXJzaW5nKVxuICAgIGxldCBzZWFyY2hUZXJtczogc3RyaW5nW107XG4gICAgbGV0IGlzT3JTZWFyY2ggPSBmYWxzZTtcbiAgICBsZXQgaXNBbmRTZWFyY2ggPSBmYWxzZTtcblxuICAgIGlmICgvXFxiT1JcXGIvaS50ZXN0KHNlYXJjaFF1ZXJ5KSkge1xuICAgICAgICBzZWFyY2hUZXJtcyA9IHNlYXJjaFF1ZXJ5LnNwbGl0KC9cXGJPUlxcYi9pKS5tYXAodGVybSA9PiB0ZXJtLnRyaW0oKSk7XG4gICAgICAgIGlzT3JTZWFyY2ggPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoL1xcYkFORFxcYi9pLnRlc3Qoc2VhcmNoUXVlcnkpKSB7XG4gICAgICAgIHNlYXJjaFRlcm1zID0gc2VhcmNoUXVlcnkuc3BsaXQoL1xcYkFORFxcYi9pKS5tYXAodGVybSA9PiB0ZXJtLnRyaW0oKSk7XG4gICAgICAgIGlzQW5kU2VhcmNoID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZWFyY2hUZXJtcyA9IHNlYXJjaFF1ZXJ5LnNwbGl0KC9cXHMrLykubWFwKHRlcm0gPT4gdGVybS50cmltKCkpOyAvLyBEZWZhdWx0IEFORCBiZWhhdmlvclxuICAgIH1cblxuICAgIGlmIChERUJVR19NT0RFKSBjb25zb2xlLmxvZyhg8J+UjiBEZXRlY3RlZCAke2lzT3JTZWFyY2ggPyBcIk9SXCIgOiBpc0FuZFNlYXJjaCA/IFwiQU5EXCIgOiBcIkJhc2ljXCJ9IFNlYXJjaGAsIHNlYXJjaFRlcm1zKTtcblxuICAgIHJldHVybiBjb2xsZWN0aW9ucy5tYXAoY29sbGVjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IGZ1c2UgPSBuZXcgRnVzZShjb2xsZWN0aW9uLml0ZW1zLCB7XG4gICAgICAgICAgICBrZXlzOiBbXCJ0aXRsZVwiLCBcImF1dGhvclwiLCBcImRlc2NyaXB0aW9uXCIsIFwiY2F0ZWdvcnlOYW1lXCIsIFwicHVibGlzaGVyXCIsIFwiZGF0ZVwiLCBcInRhZ3NcIl0sIC8vIOKchSBTZWFyY2hlcyBtdWx0aXBsZSBmaWVsZHNcbiAgICAgICAgICAgIGluY2x1ZGVTY29yZTogdHJ1ZSxcbiAgICAgICAgICAgIHRocmVzaG9sZDogMC40IC8vIOKchSBBZGp1c3QgZm9yIHN0cmljdC9sb29zZSBzZWFyY2hpbmdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IG1hdGNoZWRJdGVtczogYW55W10gPSBbXTtcblxuICAgICAgICBpZiAoaXNPclNlYXJjaCkge1xuICAgICAgICAgICAgLy8g4pyFIE9SIFNlYXJjaDogTWVyZ2UgcmVzdWx0cyBmcm9tIHNlcGFyYXRlIHNlYXJjaGVzXG4gICAgICAgICAgICBzZWFyY2hUZXJtcy5mb3JFYWNoKHRlcm0gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBmdXNlLnNlYXJjaCh0ZXJtKS5tYXAocmVzdWx0ID0+IHJlc3VsdC5pdGVtKTtcbiAgICAgICAgICAgICAgICBpZiAoREVCVUdfTU9ERSkgY29uc29sZS5sb2coXCJGdXp6eSBzZWFyY2ggcmVzdWx0cywgU2FtOlwiLCByZXN1bHRzKTtcbiAgICAgICAgICAgICAgICBtYXRjaGVkSXRlbXMucHVzaCguLi5yZXN1bHRzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlc1xuICAgICAgICAgICAgbWF0Y2hlZEl0ZW1zID0gQXJyYXkuZnJvbShuZXcgU2V0KG1hdGNoZWRJdGVtcykpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQW5kU2VhcmNoKSB7XG4gICAgICAgICAgICAvLyDinIUgQU5EIFNlYXJjaDogTXVzdCBtYXRjaCBhdCBsZWFzdCBvbmUgdGVybSBpbiBlYWNoIHNlcGFyYXRlIHNlYXJjaFxuICAgICAgICAgICAgY29uc3Qgc2VhcmNoUmVzdWx0cyA9IHNlYXJjaFRlcm1zLm1hcCh0ZXJtID0+IGZ1c2Uuc2VhcmNoKHRlcm0pLm1hcChyZXN1bHQgPT4gcmVzdWx0Lml0ZW0pKTtcblxuICAgICAgICAgICAgLy8g4pyFIEtlZXAgb25seSBpdGVtcyB0aGF0IGFwcGVhciBpbiAqZXZlcnkqIHNlYXJjaCByZXN1bHQgc2V0XG4gICAgICAgICAgICBtYXRjaGVkSXRlbXMgPSBzZWFyY2hSZXN1bHRzLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYy5maWx0ZXIoaXRlbSA9PiBjdXJyLmluY2x1ZGVzKGl0ZW0pKTtcbiAgICAgICAgICAgIH0sIHNlYXJjaFJlc3VsdHNbMF0gfHwgW10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8g4pyFIEJhc2ljIFNlYXJjaCAoTm8gQU5EL09SKVxuICAgICAgICAgICAgbWF0Y2hlZEl0ZW1zID0gZnVzZS5zZWFyY2goc2VhcmNoUXVlcnkpLm1hcChyZXN1bHQgPT4gcmVzdWx0Lml0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25OYW1lOiBjb2xsZWN0aW9uLmNvbGxlY3Rpb25OYW1lLFxuICAgICAgICAgICAgZGVzaWduYXRvcjogY29sbGVjdGlvbi5kZXNpZ25hdG9yIHx8IFwiTUlTQ1wiLFxuICAgICAgICAgICAgaXRlbXM6IG1hdGNoZWRJdGVtc1xuICAgICAgICB9O1xuICAgIH0pO1xufSJdfQ==